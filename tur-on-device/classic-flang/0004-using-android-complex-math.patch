--- a/runtime/libpgmath/lib/common/mth_intrinsics.h
+++ b/runtime/libpgmath/lib/common/mth_intrinsics.h
@@ -18,6 +18,15 @@
 extern "C" {
 #endif
 
+#if !defined(__cplusplus) && defined(__ANDROID__) && __ANDROID_API__ < 26
+double complex clog(double complex __x);
+float complex clogf(float complex __x);
+long double complex clogl(long double complex __x);
+double complex cpow(double complex __x, double complex __z);
+float complex cpowf(float complex __x, float complex __z);
+long double complex cpowl(long double complex __x, long double complex __z);
+#endif
+
 /*
  * Real.
  */
--- a/lib/scutil/host-fp-folding.c
+++ b/lib/scutil/host-fp-folding.c
@@ -28,6 +28,12 @@
 #include <mmintrin.h>
 #endif
 
+#if defined(__ANDROID__) && __ANDROID_API__ < 26
+double complex cpow(double complex __x, double complex __z);
+float complex cpowf(float complex __x, float complex __z);
+long double complex cpowl(long double complex __x, long double complex __z);
+#endif
+
 /*
  *  Build-time sanity checks
  */
--- a/tools/flang1/flang1exe/CMakeLists.txt
+++ b/tools/flang1/flang1exe/CMakeLists.txt
@@ -161,7 +161,7 @@
   )
 
 if (NOT MSVC)
-  target_link_libraries(flang1 PRIVATE m)
+  target_link_libraries(flang1 PRIVATE m android-complex-math)
 endif()
 
 # Install flang1 executable
--- a/tools/flang2/flang2exe/CMakeLists.txt
+++ b/tools/flang2/flang2exe/CMakeLists.txt
@@ -134,7 +134,7 @@
   )
 
 if (NOT MSVC)
-  target_link_libraries(flang2 PRIVATE m)
+  target_link_libraries(flang2 PRIVATE m android-complex-math)
 endif()
 
 add_dependencies(flang2
--- a/runtime/libpgmath/lib/CMakeLists.txt
+++ b/runtime/libpgmath/lib/CMakeLists.txt
@@ -252,6 +252,9 @@
 add_library(${LIBPGMATH_LIBRARY_NAME}_static STATIC ${TARGET_OBJECTS})
 add_library(${LIBPGMATH_LIBRARY_NAME} SHARED ${TARGET_OBJECTS})
 target_link_libraries(${LIBPGMATH_LIBRARY_NAME} INTERFACE ${LIBPGMATH_LIBRARY_NAME}_static)
+if(${CMAKE_SYSTEM_NAME} MATCHES "Android")
+  target_link_libraries(${LIBPGMATH_LIBRARY_NAME} PRIVATE m android-complex-math)
+endif()
 if(${LIBPGMATH_SYSTEM_NAME} MATCHES "Windows")
     set_target_properties(${LIBPGMATH_LIBRARY_NAME}_static PROPERTIES OUTPUT_NAME lib${LIBPGMATH_LIBRARY_NAME})
     set_target_properties(${LIBPGMATH_LIBRARY_NAME} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
