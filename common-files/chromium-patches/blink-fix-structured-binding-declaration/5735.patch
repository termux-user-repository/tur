--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -238,7 +238,10 @@
                               : BuildGridSizingTree(&oof_children);
 
   LayoutUnit intrinsic_block_size;
-  auto& [grid_items, layout_data, tree_size] = grid_sizing_tree.TreeRootData();
+  auto& tree_root_data = grid_sizing_tree.TreeRootData();
+  auto& grid_items = tree_root_data.grid_items;
+  auto& layout_data = tree_root_data.layout_data;
+  auto& tree_size = tree_root_data.subtree_size;
 
   if (IsBreakInside(BreakToken())) {
     // TODO(layout-dev): When we support variable inline-size fragments we'll
@@ -520,8 +523,10 @@
                                 row_auto_repetitions);
 
   bool has_nested_subgrid = false;
-  auto& [grid_items, layout_data, subtree_size] =
-      sizing_tree->CreateSizingData(opt_subgrid_data);
+  auto& sizing_data = sizing_tree->CreateSizingData(opt_subgrid_data);
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   if (!must_ignore_children) {
     // Construct grid items that are not subgridded.
@@ -650,8 +655,10 @@
   NGGridSizingTree sizing_tree;
 
   if (const auto* layout_subtree = ConstraintSpace().GridLayoutSubtree()) {
-    auto& [grid_items, layout_data, subtree_size] =
-        sizing_tree.CreateSizingData();
+    auto& sizing_data = sizing_tree.CreateSizingData();
+    auto& grid_items = sizing_data.grid_items;
+    auto& layout_data = sizing_data.layout_data;
+    auto& subtree_size = sizing_data.subtree_size;
 
     const auto& node = Node();
     grid_items =
@@ -1178,8 +1185,10 @@
     return baseline_fragment.BlockSize() + baseline_shim;
   };
 
-  const auto& [begin_set_index, end_set_index] =
-      subgridded_item->SetIndices(track_direction);
+  const auto& set_indices = subgridded_item->SetIndices(track_direction);
+  const auto& begin_set_index = set_indices.begin;
+  const auto& end_set_index = set_indices.end;
+      
   const auto& track_collection =
       is_for_columns ? subgridded_item.ParentLayoutData().Columns()
                      : subgridded_item.ParentLayoutData().Rows();
@@ -1640,8 +1649,10 @@
     const absl::optional<GridTrackSizingDirection>& opt_track_direction) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
-      sizing_subtree.SubtreeRootData();
+  auto& subtree_root_data = sizing_subtree.SubtreeRootData();
+  auto& grid_items = subtree_root_data.grid_items;
+  auto& layout_data = subtree_root_data.layout_data;
+  auto& subtree_size = subtree_root_data.subtree_size;
 
   auto InitAndCacheTrackSizes = [&](GridTrackSizingDirection track_direction) {
     InitializeTrackCollection(opt_subgrid_data, track_direction, &layout_data);
@@ -1825,8 +1836,10 @@
     bool* opt_needs_additional_pass) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
-      sizing_subtree.SubtreeRootData();
+  auto& subtree_root_data = sizing_subtree.SubtreeRootData();
+  auto& layout_data = subtree_root_data.layout_data;
+  auto& grid_items = subtree_root_data.grid_items;
+  auto& subtree_size = subtree_root_data.subtree_size;
 
   const bool is_for_columns = track_direction == kForColumns;
   const bool has_non_definite_track =
@@ -4156,8 +4169,9 @@
   DCHECK(!grid_item.IsOutOfFlow());
   DCHECK(!grid_item.is_subgridded_to_parent_grid);
 
-  const auto& [begin_set_index, end_set_index] =
-      grid_item.SetIndices(track_collection.Direction());
+  const auto& set_indices = grid_item.SetIndices(track_collection.Direction());
+  const auto& begin_set_index = set_indices.begin;
+  const auto& end_set_index = set_indices.end;
 
   if (start_offset) {
     *start_offset = track_collection.GetSetOffset(begin_set_index);
