--- a/src/lib/android_getdomainname.c
+++ b/src/lib/android_getdomainname.c
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#if defined(__ANDROID__) &&  __ANDROID_API__ < 26
+
+#include <errno.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/utsname.h>
+
+int getdomainname(char* name, size_t len) {
+  struct utsname uts;
+  if (uname(&uts) == -1) return -1;
+
+  // Note: getdomainname()'s behavior varies across implementations when len is
+  // too small.  bionic follows the historical libc policy of returning EINVAL,
+  // instead of glibc's policy of copying the first len bytes without a NULL
+  // terminator.
+  if (strlen(uts.domainname) >= len) {
+      errno = EINVAL;
+      return -1;
+  }
+
+  strncpy(name, uts.domainname, len);
+  return 0;
+}
+
+#endif
--- a/src/dns_conf/smartdns_domain.c
+++ b/src/dns_conf/smartdns_domain.c
@@ -21,6 +21,10 @@
 
 #include <stdio.h>
 
+#if defined(__ANDROID__) && __ANDROID_API__ < 26
+int getdomainname(char* __buf, size_t __buf_size);
+#endif
+
 void _config_setup_smartdns_domain(void)
 {
 	char hostname[DNS_MAX_CNAME_LEN];
--- a/src/dns_server/dns_server.c
+++ b/src/dns_server/dns_server.c
@@ -65,6 +65,10 @@
 #include <sys/epoll.h>
 #include <sys/eventfd.h>
 
+#if defined(__ANDROID__) && __ANDROID_API__ < 26
+int getdomainname(char* __buf, size_t __buf_size);
+#endif
+
 static int is_server_init;
 struct dns_server server;
 
--- a/src/utils/ssl.c
+++ b/src/utils/ssl.c
@@ -28,6 +28,10 @@
 #include <pthread.h>
 #include <sys/stat.h>
 
+#if defined(__ANDROID__) && __ANDROID_API__ < 26
+int getdomainname(char* __buf, size_t __buf_size);
+#endif
+
 #define DNS_MAX_HOSTNAME_LEN 256
 
 struct DNS_EVP_PKEY_CTX {
