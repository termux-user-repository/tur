GCC doesn't have proper support for CWG 1315 until commit [2], which is landed in GCC 
12. I don't want to cherry-pick this commit for every GCC toolchain, so I implement
`has_specialization` with SFINAE in another method. Hopefully there aren't many bugs...

[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96555
[2]: https://github.com/gcc-mirror/gcc/commit/9b94785dedb08b006419bec1a402614d9241317a

--- a/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/c++/v1/__iterator/segmented_iterator.h
+++ b/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/c++/v1/__iterator/segmented_iterator.h
@@ -65,12 +65,24 @@
 };
 */
 
+#if defined(__GNUC__) && __GNUC__ < 12
+
+template <class _Tp, class = void>
+struct __has_specialization : false_type {};
+
+template <class _Tp>
+struct __has_specialization<_Tp, __void_t<decltype(_Tp())>> : true_type {};
+
+#else
+
 template <class _Tp, size_t = 0>
 struct __has_specialization : false_type {};
 
 template <class _Tp>
 struct __has_specialization<_Tp, sizeof(_Tp) * 0> : true_type {};
 
+#endif
+
 template <class _Iterator>
 using __is_segmented_iterator = __has_specialization<__segmented_iterator_traits<_Iterator> >;
 
