https://github.com/nodejs/node/commit/b8a794d72bad66f25ce645d08defb41bd57c3371
https://github.com/nodejs/node/commit/779d7efa72ed514ab81c800c74052c96ad102c08
https://github.com/nodejs/gyp-next/commit/d0504e6700ce48f44957a4d5891b142a60be946f

--- a/tools/icu/shrink-icu-src.py
+++ b/tools/icu/shrink-icu-src.py
@@ -5,6 +5,7 @@
 import re
 import sys
 import shutil
+import io
 
 parser = optparse.OptionParser()
 
@@ -79,10 +80,11 @@
     icu_ver_major = None
     matchVerExp = r'^\s*#define\s+U_ICU_VERSION_SHORT\s+"([^"]*)".*'
     match_version = re.compile(matchVerExp)
-    for line in open(uvernum_h).readlines():
-        m = match_version.match(line)
-        if m:
-            icu_ver_major = m.group(1)
+    with io.open(uvernum_h, encoding='utf8') as in_file:
+        for line in in_file:
+            m = match_version.match(line)
+            if m:
+                icu_ver_major = m.group(1)
     if not icu_ver_major:
         print(' Could not read U_ICU_VERSION_SHORT version from %s' % uvernum_h)
         sys.exit(1)
--- a/tools/configure.d/nodedownload.py
+++ b/tools/configure.d/nodedownload.py
@@ -7,10 +7,7 @@
 import zipfile
 import tarfile
 import contextlib
-try:
-    from urllib.request import FancyURLopener, URLopener
-except ImportError:
-    from urllib import FancyURLopener, URLopener
+import urllib.request
 
 def formatSize(amt):
     """Format a size as a string in MB"""
@@ -21,10 +18,15 @@
     spin = ".:|'"
     return (spin[c % len(spin)])
 
-class ConfigOpener(FancyURLopener):
-    """fancy opener used by retrievefile. Set a UA"""
-    # append to existing version (UA)
-    version = '%s node.js/configure' % URLopener.version
+class ConfigHandler(urllib.request.BaseHandler):
+    """base handler used by retrievefile. Set a UA"""
+    def http_request(self, req):
+        ua = rea.get_header('User-Agent')
+        print(ua)
+        req.add_header('User-Agent', '%s node.js/configure' % ua)
+        return req
+
+urllib.request.install_opener(urllib.request.build_opener(ConfigHandler()))
 
 def reporthook(count, size, total):
     """internal hook used by retrievefile"""
@@ -38,7 +40,7 @@
     try:
         sys.stdout.write(' <%s>\nConnecting...\r' % url)
         sys.stdout.flush()
-        ConfigOpener().retrieve(url, targetfile, reporthook=reporthook)
+        urllib.request.urlretrieve(url, targetfile, reporthook=reporthook)
         print('')  # clear the line
         return targetfile
     except IOError as err:
@@ -63,7 +65,7 @@
     digest = hashlib.new(hashAlgo)
     with open(targetfile, 'rb') as f:
       chunk = f.read(1024)
-      while chunk !=  "":
+      while len(chunk) > 0:
         digest.update(chunk)
         chunk = f.read(1024)
     return digest.hexdigest()
--- a/tools/icu/shrink-icu-src.py
+++ b/tools/icu/shrink-icu-src.py
@@ -116,14 +116,12 @@
 # Now, print a short notice
 readme_name = os.path.join(options.icusmall, "README-SMALL-ICU.txt" )
 
-fi = open(readme_name, 'wb')
-print("Small ICU sources - auto generated by shrink-icu-src.py", file=fi)
-print("", file=fi)
-print("This directory contains the ICU subset used by --with-intl=small-icu (the default)", file=fi)
-print("It is a strict subset of ICU %s source files with the following exception(s):" % (icu_ver_major), file=fi)
-print("* %s : Reduced-size data file" % (dst_datafile), file=fi)
-print("", file=fi)
-print("", file=fi)
-print("To rebuild this directory, see ../../tools/icu/README.md", file=fi)
-print("", file=fi)
-fi.close()
+msg_fmt = """\
+ICU sources - auto generated by shrink-icu-src.py\n
+This directory contains the ICU subset used by --with-intl=full-icu
+It is a strict subset of ICU {} source files with the following exception(s):
+* {} : compressed data file\n\n
+To rebuild this directory, see ../../tools/icu/README.md\n"""
+
+with open(readme_name, 'w') as out_file:
+    print(msg_fmt.format(icu_ver_major, dst_cmp_datafile), file=out_file)
--- a/tools/gyp/pylib/gyp/input.py
+++ b/tools/gyp/pylib/gyp/input.py
@@ -226,7 +226,7 @@
     # Open the build file for read ('r') with universal-newlines mode ('U')
     # to make sure platform specific newlines ('\r\n' or '\r') are converted to '\n'
     # which otherwise will fail eval()
-    if sys.platform == 'zos':
+    if PY3 or sys.platform == 'zos':
       # On z/OS, universal-newlines mode treats the file as an ascii file. But since
       # node-gyp produces ebcdic files, do not use that mode.
       build_file_contents = open(build_file_path, 'r').read()
--- a/deps/v8/third_party/jinja2/tests.py
+++ b/deps/v8/third_party/jinja2/tests.py
@@ -10,7 +10,7 @@
 """
 import operator
 import re
-from collections import Mapping
+from collections.abc import Mapping
 from jinja2.runtime import Undefined
 from jinja2._compat import text_type, string_types, integer_types
 import decimal
--- a/tools/inspector_protocol/jinja2/tests.py
+++ b/tools/inspector_protocol/jinja2/tests.py
@@ -10,7 +10,7 @@
 """
 import operator
 import re
-from collections import Mapping
+from collections.abc import Mapping
 from jinja2.runtime import Undefined
 from jinja2._compat import text_type, string_types, integer_types
 import decimal
