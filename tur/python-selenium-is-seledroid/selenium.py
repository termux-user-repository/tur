# selenium dummy based on seledroid, generated by the termux package python-selenium-is-seledroid
import sys, types

class DummyOptions:
  def add_argument(self, arg):
    pass

webdriver_original = None

def get_webdriver_original():
  global webdriver_original
  if webdriver_original is None:
    import seledroid.webdriver as webdriver_original

    class AdaptedSeledroidChrome(webdriver_original.Chrome):
      def __init__(self, *args, options=None, **kwargs):
        return super().__init__(*args, **kwargs)

    webdriver_original.Chrome = AdaptedSeledroidChrome
  return webdriver_original

class SeleniumDummyWebdriverModule(types.ModuleType):
  def __dir__(self):
    webdriver = get_webdriver_original()
    dir_value = dir(webdriver)
    return dir_value

  def __getattribute__(self, name):
    webdriver = get_webdriver_original()
    try:
      value = getattr(webdriver, name)
    except AttributeError:
      if name.endswith("Options"):
        value = DummyOptions
      elif name[:1].isupper():
        value = webdriver.Chrome
      else:
        raise
    return value

# convert this into a selenium dummy package
import seledroid
__package__ = "selenium"
__path__ = seledroid.__path__

# ====== selenium.webdriver ======
sys.modules["selenium.webdriver"] = webdriver = SeleniumDummyWebdriverModule("selenium.webdriver")

# ========== Key.RETURN ==========
from selenium.webdriver.common.keys import Keys
Keys.RETURN = Keys.ENTER

# ======= selenium.common ========
import seledroid.webdriver.common as common
sys.modules["selenium.common"] = common

# == selenium.common.exceptions ==
import seledroid.webdriver.common.exception as exceptions
sys.modules["selenium.common.exceptions"] = exceptions
common.exceptions = exceptions

